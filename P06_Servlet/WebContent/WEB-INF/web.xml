<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>P06_Servlet</display-name>
  
  <!-- 브라우저에서 요청하는 맵핑 이름에 대해서 실제로 실행하는 서블릿 클래스를 설정하는 태그
  <servlet> 항목을 보면 컨테이너가 관리하는 웹 애플리케이션에는 어떤 것들이 있는지 알 수 있다.
  tomcat 서버 안에 컨테이너
   -->
   <servlet>
   <!--
   	servlet-name tag : servlet tag + servlet-mapping tag 연결
   	servlet-mapping tag 의 servlet-name tag와 동일
    -->
   	<servlet-name>ex01</servlet-name>
   	<!--
    브라우저에서 요청하는 맵핑 이름에 대해 실제로 기능을 수행하는 클래스 생성
     -->
   	<servlet-class>ex01.LifeCycle</servlet-class>
   </servlet>
  
  <!-- 런타임 시, 요청이 들어오면 컨테이너는 <servlet-mapping> 항목을 검색 -->
  <servlet-mapping>
  	<servlet-name>ex01</servlet-name>
  	<!-- 웹 브라우저에서 요청하는 맵핑 이름 -->
  	<url-pattern>/life</url-pattern>
  </servlet-mapping>
  
  <!-- 
  url을 통해 요청이 들어온다. servlet의 이름과 servlet-mapping의 이름을 연결해서 class가 실행된다.
   -->
  
  
  
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>